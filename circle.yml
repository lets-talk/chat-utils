# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build-and-test-pr:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest-browsers
    environment:
      GIT_BRANCH: develop

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/chat-utils

    steps:
      - run:
          name: "Checking Versions (node && npm)"
          command: |
            node --version
            npm --version

      # Checkokut repository
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - app-{{ .Environment.CACHE_VERSION }}-dependencies-{{ checksum "packages/availability/package.json" }}-{{ checksum "packages/embedded-lisp/package.json" }}-{{ checksum "packages/rule-machine/package.json" }}-{{ checksum "packages/widgets-manager/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - app-{{ .Environment.CACHE_VERSION }}-dependencies-

      # Install project dependencies (for every package)
      - run: npm install

      - save_cache:
          paths:
            - node_modules
            - packages/availability/node_modules
            - packages/embedded-lisp/node_modules
            - packages/rule-machine/node_modules
            - packages/widgets-manager/node_modules
          key: app-{{ .Environment.CACHE_VERSION }}-dependencies-{{ checksum "packages/availability/package.json" }}-{{ checksum "packages/embedded-lisp/package.json" }}-{{ checksum "packages/rule-machine/package.json" }}-{{ checksum "packages/widgets-manager/package.json" }}

      # Check for updates!
      # - run:
      #     name: "Checking for npm packages not uptdated"
      #     command: npm run check-updates

      # Run tests!
      # Get packages names that changes and only execute on those that has git changes
      - run: for dir in $(git diff --name-only $CIRCLE_BRANCH $(git merge-base $CIRCLE_BRANCH origin/$GIT_BRANCH) | sed 1d | grep 'packages/' | cut -d "/" -f2 | sed '/^\.circleci$/d' | sort -u); do cd packages/$dir; echo "running tests for package $dir"; npm run test:ci; cd ../..; done

      # Create temp directories
      - run: |
          mkdir -p /tmp/artifacts
          mkdir -p /tmp/test-reports
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/artifacts
  
      - persist_to_workspace:
          root: ~/chat-utils
          paths: .
  build-and-test-master:
    docker:
      # specify the version you desire here
      - image: circleci/node:latest-browsers
    environment:
      GIT_BRANCH: master

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/chat-utils

    steps:
      - run:
          name: "Checking Versions (node && npm)"
          command: |
            node --version
            npm --version

      # Checkokut repository
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - app-{{ .Environment.CACHE_VERSION }}-dependencies-{{ checksum "packages/availability/package.json" }}-{{ checksum "packages/embedded-lisp/package.json" }}-{{ checksum "packages/rule-machine/package.json" }}-{{ checksum "packages/widgets-manager/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - app-{{ .Environment.CACHE_VERSION }}-dependencies-

      # Install project dependencies (for every package)
      - run: npm install

      - save_cache:
          paths:
            - node_modules
            - packages/availability/node_modules
            - packages/embedded-lisp/node_modules
            - packages/rule-machine/node_modules
            - packages/widgets-manager/node_modules
          key: app-{{ .Environment.CACHE_VERSION }}-dependencies-{{ checksum "packages/availability/package.json" }}-{{ checksum "packages/embedded-lisp/package.json" }}-{{ checksum "packages/rule-machine/package.json" }}-{{ checksum "packages/widgets-manager/package.json" }}

      # Check for updates!
      # - run:
      #     name: "Checking for npm packages not uptdated"
      #     command: npm run check-updates

      # Run tests!
      # Get packages names that changes and only execute on those that has git changes
      - run: for dir in $(git diff --name-only $CIRCLE_BRANCH $(git merge-base $CIRCLE_BRANCH origin/$GIT_BRANCH) | sed 1d | grep 'packages/' | cut -d "/" -f2 | sed '/^\.circleci$/d' | sort -u); do cd packages/$dir; echo "running tests for package $dir"; npm run test:ci; cd ../..; done

      # Create temp directories
      - run: |
          mkdir -p /tmp/artifacts
          mkdir -p /tmp/test-reports
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/artifacts
  
      - persist_to_workspace:
          root: ~/chat-utils
          paths: .
  
  publish:
    docker:
      - image: circleci/node:latest-browsers
    working_directory: ~/chat-utils
    steps:
      - attach_workspace:
          at: ~/chat-utils
      - run:
          name: Run lerna bootstrap
          command: npm run bootstrap
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish packages that changed
          command: npm run publish

# Workflows: one for build and other for deploy (only on master branch)
workflows:
  version: 2
  build-test-and-publish:
    jobs:
      - build-and-test-pr:
          filters:
            branches:
              ignore: master
      - build-and-test-master:
          filters:
            branches:
              only: master
      - publish:
          requires:
            - build-and-test-master
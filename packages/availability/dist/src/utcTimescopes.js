"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const timeFromDate = (date) => {
    return [
        date.getUTCHours(),
        date.getUTCMinutes(),
        date.getUTCSeconds(),
    ];
};
exports.includesDate = (date) => (timescope) => {
    if (timescope.day !== date.getUTCDay())
        return false;
    const time = timeFromDate(date);
    const openingTime = secondsFromTime(timescope.open);
    const currentTime = secondsFromTime(time);
    const closingTime = secondsFromTime(timescope.close);
    return openingTime <= currentTime && currentTime <= closingTime;
};
exports.timeUntilTimescope = (date) => (timescope) => {
    const day = date.getUTCDay();
    const time = timeFromDate(date);
    const currentTime = secondsFromDayAndTime(day, time);
    const openingTime = secondsFromDayAndTime(timescope.day, timescope.open);
    const nextOpening = openingTime >= currentTime
        ? openingTime
        : secondsFromDayAndTime(timescope.day + 7, timescope.open);
    return nextOpening - currentTime;
};
exports.utcTimescopes = (oldTimescopes) => {
    const rawUtcTimescopes = oldTimescopes.map(rawUtcTimescope);
    return utils_1.poorMansFlatmap(rawUtcTimescopes, splitTimescope)
        .sort(compareTimescopes)
        .reduce(appendTimescope, []);
};
const rawUtcTimescope = (oldTimescope) => {
    return {
        day: oldTimescope.day,
        open: applyOffset(timeFromString(oldTimescope.open), oldTimescope.offset),
        close: applyOffset(timeFromString(oldTimescope.close), oldTimescope.offset),
    };
};
const timeFromString = (time) => {
    const parse = (s) => parseInt(s, undefined);
    const [hours, minutes, seconds] = time.split(':').map(parse);
    return [hours, minutes, seconds];
};
const secondsFromTime = (time) => {
    const [hours, minutes, seconds] = time;
    return (hours * 60 + minutes) * 60 + seconds;
};
const secondsFromDayAndTime = (day, time) => {
    return day * 24 * 3600 + secondsFromTime(time);
};
const compareTimescopes = (lhs, rhs) => {
    const lhsSeconds = secondsFromDayAndTime(lhs.day, lhs.open);
    const rhsSeconds = secondsFromDayAndTime(rhs.day, rhs.open);
    return lhsSeconds - rhsSeconds;
};
const modulo = (dividend, divisor) => {
    return ((dividend % divisor) + divisor) % divisor;
};
const applyOffset = (time, offset) => {
    const timeInSeconds = secondsFromTime(time) - offset;
    const newSeconds = modulo(timeInSeconds, 60);
    const remainingMinutes = (timeInSeconds - newSeconds) / 60;
    const newMinutes = modulo(remainingMinutes, 60);
    const newHours = (remainingMinutes - newMinutes) / 60;
    return [newHours, newMinutes, newSeconds];
};
const splitTimescope = (raw) => {
    const openingHour = raw.open[0];
    if (openingHour < 0) {
        return [
            {
                day: modulo(raw.day - 1, 7),
                open: [raw.open[0] + 24, raw.open[1], raw.open[2]],
                close: [23, 59, 59],
            },
            {
                day: raw.day,
                open: [0, 0, 0],
                close: raw.close,
            }
        ];
    }
    const closingHour = raw.close[0];
    if (closingHour > 23) {
        return [
            {
                day: raw.day,
                open: raw.open,
                close: [23, 59, 59],
            },
            {
                day: modulo(raw.day + 1, 7),
                open: [0, 0, 0],
                close: [raw.close[0] - 24, raw.close[1], raw.close[2]]
            }
        ];
    }
    return [raw];
};
const appendTimescope = (timescopes, newTimescope) => {
    const lastTimescope = utils_1.lastFromArray(timescopes);
    if (lastTimescope === null) {
        return [newTimescope];
    }
    if (lastTimescope.day === newTimescope.day) {
        const oneSecondAfterClose = secondsFromTime(lastTimescope.close) + 1;
        const nextOpeningTime = secondsFromTime(newTimescope.open);
        if (oneSecondAfterClose == nextOpeningTime) {
            const mergedTimescope = {
                day: lastTimescope.day,
                open: lastTimescope.open,
                close: newTimescope.close
            };
            return timescopes
                .slice(0, -1)
                .concat(mergedTimescope);
        }
    }
    return timescopes.concat(newTimescope);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRjVGltZXNjb3Blcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmlub3NjcmlwdC9yZXBvcy9jaGF0LXV0aWxzL3BhY2thZ2VzL2F2YWlsYWJpbGl0eS8iLCJzb3VyY2VzIjpbInNyYy91dGNUaW1lc2NvcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsbUNBR2lCO0FBY2pCLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBVSxFQUFRLEVBQUU7SUFDeEMsT0FBTztRQUNMLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFO0tBQ3JCLENBQUM7QUFDSixDQUFDLENBQUE7QUFDWSxRQUFBLFlBQVksR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUF1QixFQUFXLEVBQUU7SUFDL0UsSUFBSSxTQUFTLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUVyRCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEMsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyRCxPQUFPLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQztBQUNsRSxDQUFDLENBQUM7QUFFVyxRQUFBLGtCQUFrQixHQUFHLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQXVCLEVBQVUsRUFBRTtJQUNwRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDN0IsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FB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